version: "3.9"

services:
  frontend:
    image: frontend
    build:
      # context definuje cestu k popisu
      context: ./frontend
    environment:
      # promenne, ktere lze cist v kontejneru
      - GQL_PROXY=http://apollo:3000/api/gql/
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu)
      test: "curl -f -X GET http://localhost:8000/ui/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

  gql_externalids:
    image: gql_externalids
    build:
      # context definuje cestu k popisu
      context: ./gql_externalids
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - POSTGRES_HOST=postgres:5432
      - DEMO=true
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      postgres:
        condition: service_started

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: 
    - 31125:8000 #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
    #  

  gql_facilities:
    image: gql_facilities
    build:
      # context definuje cestu k popisu
      context: ./gql_facilities
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - DEMO=true
      # kontejnery, ktere musi byt spusteny drive
    depends_on:
      - postgres
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31125:8000 
    
  gql_projects:
    image: gql_projects
    build:
      # context definuje cestu k popisu
      context: ./gql_projects
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
  
  gql_publications:
    image: gql_publications
    build:
      # context definuje cestu k popisu
      context: ./gql_publications
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres 

  postgres:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports:
      - 5432:5432

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      # promenne, ktere lze cist v kontejneru
      - PGADMIN_DEFAULT_EMAIL=anoyne@anywhere.com
      - PGADMIN_DEFAULT_PASSWORD=example
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - 31122:80

  redis:
    image: redis/redis-stack:6.2.4-v4
    ports:
      - 31188:8001
